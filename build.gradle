import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
	dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath "org.ajoberstar.grgit:grgit-gradle:4.0.0"
    }
    configurations.all {
        resolutionStrategy {
            force 'org.ow2.asm:asm:6.0_BETA'
        }
    }
}

task setupCIWorkspace {
    // do nothing, stub method
}

apply plugin: "java"
apply plugin: "org.ajoberstar.grgit"
clean { delete "target" }

group = 'com.boydti.fawe'

task setVersion {
    def revision = "unknown"
    def buildNumber = ""
    def semver = ""
    def date = ""
    try {
        def git = Grgit.open()
        date = git.head().date.format("yy.MM.dd")
        revision = "-${git.head().abbreviatedId}"
        println "Total number of commits: " + git.log().size()
        def index = -67  // Offset to match CI
        int major, minor, patch
        major = minor = patch = 0
        def commits = git.log().iterator()
        while (commits.hasNext()) {
            def commit = commits.next()
            switch (commit.fullMessage.toLowerCase()){
                case ~/(?s).*(major|remove|refactor).*/:
                    major += 1
                    break
                case ~/(?s).*(minor|add|change|fix).*/:
                    /* we're looping from head, so major == 0 â€” latest major change,
                    so we add minor and patch to it that came before */
                    if (major == 0) minor += 1
                    break
                default:
                    if (major == 0 && minor == 0) patch += 1
            }
            index++
        }
        buildNumber = "-${index}"
        semver = "-${major}.${minor}.${patch}"
    } catch (Throwable e) {
        e.printStackTrace()
    }
    version = date + revision + buildNumber + semver
    file("version.txt").text = version
    println "===\n" + version + "\n==="
}

if ( project.hasProperty("lzNoVersion") ) { // gradle build -PlzNoVersion
    version = "unknown"
}

description = """FastAsyncWorldEdit"""

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava {
        options.compilerArgs += ["-parameters"]
		options.encoding = "UTF-8"
    }

    repositories {
        mavenCentral()
        maven {url "https://mvnrepository.com/artifact/"}
        maven {url "https://repo.dmulloy2.net/content/groups/public/"}
        maven {url "https://repo.destroystokyo.com/repository/maven-public//"}
        //maven {url "https://ci.emc.gs/nexus/content/groups/aikar/" }
        maven {url "https://ci.athion.net/plugin/repository/tools/"}
        maven {url "https://jitpack.io"}
        mavenLocal()
        maven {url "https://repo.codemc.org/repository/maven-public"}
        maven {url "https://hub.spigotmc.org/nexus/content/groups/public/"}
        maven {url "https://maven.enginehub.org/repo/"}
        maven {url "https://repo.maven.apache.org/maven2"}
        maven {url "https://ci.frostcast.net/plugin/repository/everything"}
        maven {url "https://repo.spongepowered.org/maven"}
        maven {url "https://dl.bintray.com/tastybento/maven-repo"}
        maven {url "https://repo.inventivetalent.org/content/groups/public/"}
        maven {url "https://store.ttyh.ru/libraries/"}
        maven {url "https://repo.dmulloy2.net/nexus/repository/public/"}
        maven {url "https://maven.elmakers.com/repository/"}
        maven {url "https://ci.ender.zone/plugin/repository/everything/"}
        //maven {url "https://plotsquared.com/mvn/"}
    }
}
task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    destinationDir = file("./docs/javadoc")
    title = "$project.name $version API"
    options.author true
    options.links 'https://docs.spring.io/spring/docs/4.3.x/javadoc-api/', 'https://docs.oracle.com/javase/8/docs/api/', 'https://docs.spring.io/spring-ws/docs/2.3.0.RELEASE/api/', 'https://docs.spring.io/spring-security/site/docs/4.0.4.RELEASE/apidocs/'
    options.addStringOption('Xdoclint:none', '-quiet')

    delete "./docs"

    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}
